/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PublicationRolesInterface extends ethers.utils.Interface {
  functions: {
    "encodeRole(string)": FunctionFragment;
    "ens()": FunctionFragment;
    "getContributorId(address,bytes32)": FunctionFragment;
    "getRole(address,bytes32)": FunctionFragment;
    "modifyRole(address,bytes32,string)": FunctionFragment;
    "ownsPublication(bytes32,address)": FunctionFragment;
    "publicationOwner(bytes32)": FunctionFragment;
    "roles(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "encodeRole", values: [string]): string;
  encodeFunctionData(functionFragment: "ens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContributorId",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRole",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyRole",
    values: [string, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ownsPublication",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "publicationOwner",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "roles", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "encodeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContributorId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modifyRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownsPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publicationOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;

  events: {
    "ModifiedRole(bytes32,address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ModifiedRole"): EventFragment;
}

export class PublicationRoles extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PublicationRolesInterface;

  functions: {
    encodeRole(roleName: string, overrides?: CallOverrides): Promise<[string]>;

    "encodeRole(string)"(
      roleName: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ens(overrides?: CallOverrides): Promise<[string]>;

    "ens()"(overrides?: CallOverrides): Promise<[string]>;

    getContributorId(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getContributorId(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRole(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRole(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    modifyRole(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "modifyRole(address,bytes32,string)"(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ownsPublication(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "ownsPublication(bytes32,address)"(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    publicationOwner(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "publicationOwner(bytes32)"(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    roles(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "roles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  encodeRole(roleName: string, overrides?: CallOverrides): Promise<string>;

  "encodeRole(string)"(
    roleName: string,
    overrides?: CallOverrides
  ): Promise<string>;

  ens(overrides?: CallOverrides): Promise<string>;

  "ens()"(overrides?: CallOverrides): Promise<string>;

  getContributorId(
    contributor: string,
    publicationNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getContributorId(address,bytes32)"(
    contributor: string,
    publicationNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRole(
    contributor: string,
    publicationNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRole(address,bytes32)"(
    contributor: string,
    publicationNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  modifyRole(
    contributor: string,
    publicationNode: BytesLike,
    roleName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "modifyRole(address,bytes32,string)"(
    contributor: string,
    publicationNode: BytesLike,
    roleName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ownsPublication(
    publicationNode: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "ownsPublication(bytes32,address)"(
    publicationNode: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  publicationOwner(
    publicationNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "publicationOwner(bytes32)"(
    publicationNode: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  roles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "roles(bytes32)"(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    encodeRole(roleName: string, overrides?: CallOverrides): Promise<string>;

    "encodeRole(string)"(
      roleName: string,
      overrides?: CallOverrides
    ): Promise<string>;

    ens(overrides?: CallOverrides): Promise<string>;

    "ens()"(overrides?: CallOverrides): Promise<string>;

    getContributorId(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getContributorId(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRole(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRole(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    modifyRole(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "modifyRole(address,bytes32,string)"(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ownsPublication(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "ownsPublication(bytes32,address)"(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    publicationOwner(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "publicationOwner(bytes32)"(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    roles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "roles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    ModifiedRole(
      publicationNode: BytesLike | null,
      contributor: string | null,
      roleName: null
    ): EventFilter;
  };

  estimateGas: {
    encodeRole(roleName: string, overrides?: CallOverrides): Promise<BigNumber>;

    "encodeRole(string)"(
      roleName: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ens(overrides?: CallOverrides): Promise<BigNumber>;

    "ens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getContributorId(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getContributorId(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRole(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRole(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modifyRole(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "modifyRole(address,bytes32,string)"(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ownsPublication(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownsPublication(bytes32,address)"(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    publicationOwner(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "publicationOwner(bytes32)"(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roles(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "roles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeRole(
      roleName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeRole(string)"(
      roleName: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ens()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContributorId(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getContributorId(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRole(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRole(address,bytes32)"(
      contributor: string,
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modifyRole(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "modifyRole(address,bytes32,string)"(
      contributor: string,
      publicationNode: BytesLike,
      roleName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ownsPublication(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownsPublication(bytes32,address)"(
      publicationNode: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    publicationOwner(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "publicationOwner(bytes32)"(
      publicationNode: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roles(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "roles(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
