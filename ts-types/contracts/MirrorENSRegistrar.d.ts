/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MirrorENSRegistrarInterface extends ethers.utils.Interface {
  functions: {
    "changeRootNodeOwner(address)": FunctionFragment;
    "changeSubnodeOwner(string,address)": FunctionFragment;
    "ensRegistry()": FunctionFragment;
    "ensResolver()": FunctionFragment;
    "labelOwner(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "register(string,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rootName()": FunctionFragment;
    "rootNode()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "writeToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeRootNodeOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSubnodeOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ensRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ensResolver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "labelOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rootName", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootNode", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "changeRootNodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSubnodeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "labelOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rootName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writeToken", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisteredENS(address,string)": EventFragment;
    "RootNodeOwnerChange(bytes32,address)": EventFragment;
    "UpdatedENS(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredENS"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootNodeOwnerChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedENS"): EventFragment;
}

export class MirrorENSRegistrar extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MirrorENSRegistrarInterface;

  functions: {
    changeRootNodeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeRootNodeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    changeSubnodeOwner(
      label_: string,
      newOwner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "changeSubnodeOwner(string,address)"(
      label_: string,
      newOwner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    ensRegistry(overrides?: CallOverrides): Promise<[string]>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    ensResolver(overrides?: CallOverrides): Promise<[string]>;

    "ensResolver()"(overrides?: CallOverrides): Promise<[string]>;

    labelOwner(label: string, overrides?: CallOverrides): Promise<[string]>;

    "labelOwner(string)"(
      label: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    register(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rootName(overrides?: CallOverrides): Promise<[string]>;

    "rootName()"(overrides?: CallOverrides): Promise<[string]>;

    rootNode(overrides?: CallOverrides): Promise<[string]>;

    "rootNode()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    writeToken(overrides?: CallOverrides): Promise<[string]>;

    "writeToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  changeRootNodeOwner(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeRootNodeOwner(address)"(
    _newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  changeSubnodeOwner(
    label_: string,
    newOwner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "changeSubnodeOwner(string,address)"(
    label_: string,
    newOwner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  ensRegistry(overrides?: CallOverrides): Promise<string>;

  "ensRegistry()"(overrides?: CallOverrides): Promise<string>;

  ensResolver(overrides?: CallOverrides): Promise<string>;

  "ensResolver()"(overrides?: CallOverrides): Promise<string>;

  labelOwner(label: string, overrides?: CallOverrides): Promise<string>;

  "labelOwner(string)"(
    label: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  register(
    label_: string,
    owner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(string,address)"(
    label_: string,
    owner_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rootName(overrides?: CallOverrides): Promise<string>;

  "rootName()"(overrides?: CallOverrides): Promise<string>;

  rootNode(overrides?: CallOverrides): Promise<string>;

  "rootNode()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  writeToken(overrides?: CallOverrides): Promise<string>;

  "writeToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    changeRootNodeOwner(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeRootNodeOwner(address)"(
      _newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSubnodeOwner(
      label_: string,
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeSubnodeOwner(string,address)"(
      label_: string,
      newOwner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ensRegistry(overrides?: CallOverrides): Promise<string>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<string>;

    ensResolver(overrides?: CallOverrides): Promise<string>;

    "ensResolver()"(overrides?: CallOverrides): Promise<string>;

    labelOwner(label: string, overrides?: CallOverrides): Promise<string>;

    "labelOwner(string)"(
      label: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    register(
      label_: string,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rootName(overrides?: CallOverrides): Promise<string>;

    "rootName()"(overrides?: CallOverrides): Promise<string>;

    rootNode(overrides?: CallOverrides): Promise<string>;

    "rootNode()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    writeToken(overrides?: CallOverrides): Promise<string>;

    "writeToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RegisteredENS(_owner: string | null, _ens: null): EventFilter;

    RootNodeOwnerChange(
      node: BytesLike | null,
      owner: string | null
    ): EventFilter;

    UpdatedENS(_owner: string | null, _ens: null): EventFilter;
  };

  estimateGas: {
    changeRootNodeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeRootNodeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    changeSubnodeOwner(
      label_: string,
      newOwner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "changeSubnodeOwner(string,address)"(
      label_: string,
      newOwner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    ensRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    ensResolver(overrides?: CallOverrides): Promise<BigNumber>;

    "ensResolver()"(overrides?: CallOverrides): Promise<BigNumber>;

    labelOwner(label: string, overrides?: CallOverrides): Promise<BigNumber>;

    "labelOwner(string)"(
      label: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    register(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rootName(overrides?: CallOverrides): Promise<BigNumber>;

    "rootName()"(overrides?: CallOverrides): Promise<BigNumber>;

    rootNode(overrides?: CallOverrides): Promise<BigNumber>;

    "rootNode()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    writeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "writeToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    changeRootNodeOwner(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeRootNodeOwner(address)"(
      _newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    changeSubnodeOwner(
      label_: string,
      newOwner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "changeSubnodeOwner(string,address)"(
      label_: string,
      newOwner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    ensRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ensResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ensResolver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    labelOwner(
      label: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "labelOwner(string)"(
      label: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    register(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(string,address)"(
      label_: string,
      owner_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rootName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rootName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rootNode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rootNode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    writeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "writeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
